{"ast":null,"code":"var _jsxFileName = \"D:\\\\2077\\\\Waves\\\\client\\\\src\\\\components\\\\utils\\\\Form\\\\FormField.js\";\nimport React from 'react';\n\nconst FormField = ({\n  formdata,\n  change,\n  id\n}) => {\n  const showError = () => {\n    let errorMessage = null;\n\n    if (formdata.validation && !formdata.valid) {\n      errorMessage = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"error_label\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 17\n        }\n      }, formdata.validationMessage);\n    }\n\n    return errorMessage;\n  };\n\n  const renderTemplate = () => {\n    let formTemplate = null;\n\n    switch (formdata.element) {\n      case 'input':\n        formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"formBlock\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 21\n          }\n        }, formdata.showLabel ? /*#__PURE__*/React.createElement(\"div\", {\n          className: \"label_inputs\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 33\n          }\n        }, formdata.config.label) : null, /*#__PURE__*/React.createElement(\"input\", Object.assign({}, formdata.config, {\n          value: formdata.value,\n          onBlur: event => change({\n            event,\n            id,\n            blur: true\n          }),\n          onChange: event => change({\n            event,\n            id\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 25\n          }\n        })), showError());\n        break;\n\n      case 'select':\n        formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"formBlock\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }\n        }, formdata.showLabel ? /*#__PURE__*/React.createElement(\"div\", {\n          className: \"label_inputs\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 33\n          }\n        }, formdata.config.label) : null, /*#__PURE__*/React.createElement(\"select\", {\n          value: formdata.value,\n          onBlur: event => change({\n            event,\n            id,\n            blur: true\n          }),\n          onChange: event => change({\n            event,\n            id\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 25\n          }\n        }, /*#__PURE__*/React.createElement(\"option\", {\n          value: \"\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }\n        }, \"Select One:\"), formdata.config.options.map(item => /*#__PURE__*/React.createElement(\"option\", {\n          key: item.key,\n          value: item.key,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 37\n          }\n        }, item.value))), showError());\n        break;\n\n      case 'textarea':\n        formTemplate = /*#__PURE__*/React.createElement(\"div\", {\n          className: \"formBlock\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }\n        }, formdata.showLabel ? /*#__PURE__*/React.createElement(\"div\", {\n          className: \"label_inputs\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 33\n          }\n        }, formdata.config.label) : null, /*#__PURE__*/React.createElement(\"textarea\", Object.assign({}, formdata.config, {\n          value: formdata.value,\n          onBlur: event => change({\n            event,\n            id,\n            blur: true\n          }),\n          onChange: event => change({\n            event,\n            id\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }\n        })), showError());\n        break;\n\n      default:\n        formTemplate = null;\n    }\n\n    return formTemplate;\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, renderTemplate());\n};\n\nexport default FormField;","map":{"version":3,"sources":["D:/2077/Waves/client/src/components/utils/Form/FormField.js"],"names":["React","FormField","formdata","change","id","showError","errorMessage","validation","valid","validationMessage","renderTemplate","formTemplate","element","showLabel","config","label","value","event","blur","options","map","item","key"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nconst FormField = ({formdata, change, id}) => {\r\n\r\n    const showError =() => {\r\n        let errorMessage = null;\r\n        if(formdata.validation && !formdata.valid){\r\n            errorMessage = (\r\n                <div className=\"error_label\">\r\n                    {formdata.validationMessage}\r\n                </div>\r\n            )\r\n        }\r\n\r\n        return errorMessage;\r\n    }\r\n    \r\n    const renderTemplate = () => {\r\n        let formTemplate = null;\r\n\r\n        switch(formdata.element){\r\n\r\n            case('input'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\">\r\n                        {\r\n                            formdata.showLabel ?\r\n                                <div className=\"label_inputs\">{formdata.config.label}</div>\r\n                            :null\r\n                        }\r\n                        <input \r\n                            {...formdata.config}\r\n                            value={formdata.value}\r\n                            onBlur={(event) => change({event, id, blur:true})}\r\n                            onChange={(event) => change({event, id})}\r\n                        />\r\n                        {showError()}\r\n                    </div>\r\n                )\r\n            break;\r\n\r\n            case('select'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\">\r\n                        {\r\n                            formdata.showLabel ?\r\n                                <div className=\"label_inputs\">{formdata.config.label}</div>\r\n                            :null\r\n                        }\r\n                        <select\r\n                            value={formdata.value}\r\n                            onBlur={(event) => change({event, id, blur:true})}\r\n                            onChange={(event) => change({event, id})}\r\n                        >\r\n                            <option value=\"\">Select One:</option>\r\n                            {\r\n                                formdata.config.options.map( item => (\r\n                                    <option \r\n                                        key={item.key} \r\n                                        value={item.key}\r\n                                    >\r\n                                        {item.value}\r\n                                    </option>\r\n                                ))\r\n                            }\r\n                        </select>\r\n                        {showError()}\r\n                    </div>\r\n                )\r\n            break;\r\n\r\n            case('textarea'):\r\n                formTemplate = (\r\n                    <div className=\"formBlock\">\r\n                        {\r\n                            formdata.showLabel ?\r\n                                <div className=\"label_inputs\">{formdata.config.label}</div>\r\n                            :null\r\n                        }\r\n                        <textarea \r\n                            {...formdata.config}\r\n                            value={formdata.value}\r\n                            onBlur={(event) => change({event, id, blur:true})}\r\n                            onChange={(event) => change({event, id})}\r\n                        />\r\n                        {showError()}\r\n                    </div>\r\n                )\r\n            break;\r\n            default:\r\n                formTemplate = null;\r\n        }\r\n\r\n        return formTemplate;\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            {renderTemplate()}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormField;"]},"metadata":{},"sourceType":"module"}