{"ast":null,"code":"export const validate = (element, formdata = []) => {\n  let error = [true, ''];\n\n  if (element.validation.email) {\n    const valid = /\\S+@\\S+\\.\\S+/.test(element.value);\n    const message = `${!valid ? 'Must be a valid email' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  if (element.validation.confirm) {\n    const valid = element.value.trim() === formdata[element.validation.confirm].value;\n    const message = `${!valid ? 'Passwords do not match' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  if (element.validation.required) {\n    const valid = element.value.trim() !== '';\n    const message = `${!valid ? 'This field is required' : ''}`;\n    error = !valid ? [valid, message] : error;\n  }\n\n  return error;\n};\nexport const update = (element, formdata, formName) => {\n  const newFormdata = { ...formdata\n  };\n  const newElement = { ...newFormdata[element.id]\n  };\n  newElement.value = element.event.target.value;\n\n  if (element.blur) {\n    let validData = validate(newElement, formdata);\n    newElement.valid = validData[0];\n    newElement.validationMessage = validData[1];\n  }\n\n  newElement.touched = element.blur;\n  newFormdata[element.id] = newElement;\n  return newFormdata;\n};\nexport const generateData = (formdata, formname) => {\n  let dataToSubmit = {};\n\n  for (let key in formdata) {\n    if (key !== 'confirmPassword') {\n      dataToSubmit[key] = formdata[key].value;\n    }\n  }\n\n  return dataToSubmit;\n};\nexport const isFormValid = (formdata, formname) => {\n  let formIsValid = true;\n\n  for (let key in formdata) {\n    formIsValid = formdata[key].valid && formIsValid;\n  }\n\n  return formIsValid;\n};\nexport const populateOptionFields = (formdata, arrayData = [], field) => {\n  const newArray = [];\n  const newFormData = { ...formdata\n  };\n  arrayData.forEach(item => {\n    newArray.push({\n      key: item._id,\n      value: item.name\n    });\n  });\n  newFormData[field].config.options = newArray;\n  return newFormData;\n};\nexport const resetFields = (formdata, formName) => {\n  const newFormdata = { ...formdata\n  };\n\n  for (let key in newFormdata) {\n    if (key === 'images') {\n      newFormdata[key].value = [];\n    } else {\n      newFormdata[key].value = '';\n    }\n\n    newFormdata[key].valid = false;\n    newFormdata[key].touched = false;\n    newFormdata[key].validationMessage = '';\n  }\n\n  return newFormdata;\n};","map":{"version":3,"sources":["D:/2077/Waves/client/src/components/utils/Form/formActions.js"],"names":["validate","element","formdata","error","validation","email","valid","test","value","message","confirm","trim","required","update","formName","newFormdata","newElement","id","event","target","blur","validData","validationMessage","touched","generateData","formname","dataToSubmit","key","isFormValid","formIsValid","populateOptionFields","arrayData","field","newArray","newFormData","forEach","item","push","_id","name","config","options","resetFields"],"mappings":"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","sourcesContent":["\r\n\r\nexport const validate = (element, formdata=[]) => {\r\n    let error = [ true, '' ];\r\n\r\n    if(element.validation.email){\r\n        const valid = /\\S+@\\S+\\.\\S+/.test(element.value);\r\n        const message = `${!valid ? 'Must be a valid email' : ''}`;\r\n        error = !valid ? [valid, message] : error;\r\n    }\r\n\r\n    if(element.validation.confirm){\r\n        const valid = element.value.trim() === formdata[element.validation.confirm].value;\r\n        const message = `${!valid ? 'Passwords do not match' : ''}`;\r\n        error = !valid ? [valid, message] : error;\r\n    }\r\n\r\n    if(element.validation.required){\r\n        const valid = element.value.trim() !== '';\r\n        const message = `${!valid ? 'This field is required' : ''}`;\r\n        error = !valid ? [valid, message] : error;\r\n    }\r\n\r\n    return error;\r\n}\r\n\r\nexport const update = (element, formdata, formName) => {\r\n    const newFormdata = {\r\n        ...formdata\r\n    }\r\n\r\n    const newElement = {\r\n        ...newFormdata[element.id]\r\n    }\r\n\r\n    newElement.value = element.event.target.value;\r\n\r\n    if(element.blur){\r\n        let validData = validate(newElement, formdata);\r\n        newElement.valid = validData[0];\r\n        newElement.validationMessage = validData[1];\r\n    }\r\n\r\n    newElement.touched = element.blur;\r\n    newFormdata[element.id] = newElement;\r\n\r\n    return newFormdata;\r\n}\r\n\r\nexport const generateData = (formdata, formname) => {\r\n    let dataToSubmit = {};\r\n\r\n    for(let key in formdata){\r\n        if(key !== 'confirmPassword'){\r\n            dataToSubmit[key] = formdata[key].value\r\n        }\r\n    }\r\n\r\n    return dataToSubmit;\r\n}\r\n\r\nexport const isFormValid = (formdata, formname) => {\r\n    let formIsValid = true;\r\n\r\n    for(let key in formdata){\r\n        formIsValid = formdata[key].valid && formIsValid;\r\n    }\r\n\r\n    return formIsValid;\r\n}\r\n\r\nexport const populateOptionFields = (formdata, arrayData = [], field) => {\r\n    const newArray = [];\r\n    const newFormData = {...formdata};\r\n\r\n    arrayData.forEach(item => {\r\n        newArray.push({key:item._id, value: item.name})\r\n    })\r\n\r\n    newFormData[field].config.options = newArray;\r\n    return newFormData;\r\n}\r\n\r\nexport const resetFields = (formdata, formName) => {\r\n    const newFormdata = {...formdata};\r\n    for(let key in newFormdata){\r\n        if(key === 'images'){\r\n            newFormdata[key].value = [];\r\n        }else{\r\n            newFormdata[key].value = '';\r\n        }\r\n        newFormdata[key].valid = false;\r\n        newFormdata[key].touched = false;\r\n        newFormdata[key].validationMessage = '';\r\n\r\n    }\r\n\r\n    return newFormdata;\r\n}"]},"metadata":{},"sourceType":"module"}