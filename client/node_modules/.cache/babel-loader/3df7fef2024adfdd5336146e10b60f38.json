{"ast":null,"code":"var _jsxFileName = \"D:\\\\2077\\\\Waves\\\\client\\\\src\\\\components\\\\User\\\\admin\\\\manage_woods.js\";\nimport React, { Component } from 'react';\nimport FormField from '../../utils/Form/FormField';\nimport { update, generateData, isFormValid, resetFields } from '../../utils/Form/formActions';\nimport { connect } from 'react-redux';\nimport { getWoods, addWood } from '../../../actions/products_actions';\n\nclass ManageWoods extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formError: false,\n      formSuccess: false,\n      formdata: {\n        name: {\n          element: 'input',\n          value: '',\n          config: {\n            name: 'name_input',\n            type: 'text',\n            placeholder: 'Enter the wood'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touched: false,\n          validationMessage: ''\n        }\n      }\n    };\n\n    this.showCategoryItems = () => this.props.products.woods ? this.props.products.woods.map((item, i) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"category_item\",\n      key: item._id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    }, item.name)) : null;\n\n    this.updateForm = element => {\n      const newFormdata = update(element, this.state.formdata, 'woods');\n      this.setState({\n        formError: false,\n        formdata: newFormdata\n      });\n    };\n\n    this.resetFieldsHandler = () => {\n      const newFormData = resetFields(this.state.formdata, 'woods');\n      this.setState({\n        formdata: newFormData,\n        formSuccess: true\n      });\n    };\n\n    this.submitForm = event => {\n      event.preventDefault();\n      let dataToSubmit = generateData(this.state.formdata, 'woods');\n      let formIsValid = isFormValid(this.state.formdata, 'woods');\n      let existingWoods = this.props.products.woods;\n\n      if (formIsValid) {\n        this.props.dispatch(addWood(dataToSubmit, existingWoods)).then(response => {\n          if (response.payload.success) {\n            this.resetFieldsHandler();\n          } else {\n            this.setState({\n              formError: true\n            });\n          }\n        });\n      } else {\n        this.setState({\n          formError: true\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.dispatch(getWoods());\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"admin_category_wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, \"Woods\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"admin_two_column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"left\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"brands_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }\n    }, this.showCategoryItems())), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: event => this.submitForm(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormField, {\n      id: 'name',\n      formdata: this.state.formdata.name,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 22\n      }\n    }), this.state.formError ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }\n    }, \"Please check your data\") : null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => this.submitForm(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }, \"Add wood\")))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    products: state.products\n  };\n};\n\nexport default connect(mapStateToProps)(ManageWoods);","map":{"version":3,"sources":["D:/2077/Waves/client/src/components/User/admin/manage_woods.js"],"names":["React","Component","FormField","update","generateData","isFormValid","resetFields","connect","getWoods","addWood","ManageWoods","state","formError","formSuccess","formdata","name","element","value","config","type","placeholder","validation","required","valid","touched","validationMessage","showCategoryItems","props","products","woods","map","item","i","_id","updateForm","newFormdata","setState","resetFieldsHandler","newFormData","submitForm","event","preventDefault","dataToSubmit","formIsValid","existingWoods","dispatch","then","response","payload","success","componentDidMount","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\n\r\nimport FormField from '../../utils/Form/FormField';\r\nimport { update, generateData, isFormValid,resetFields} from '../../utils/Form/formActions';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { getWoods,addWood } from '../../../actions/products_actions';\r\n\r\nclass ManageWoods extends Component {\r\n\r\n    state = {\r\n        formError:false,\r\n        formSuccess:false,\r\n        formdata:{\r\n            name: {\r\n                element: 'input',\r\n                value: '',\r\n                config:{\r\n                    name: 'name_input',\r\n                    type: 'text',\r\n                    placeholder: 'Enter the wood'\r\n                },\r\n                validation:{\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                validationMessage:''\r\n            },\r\n        }\r\n    }\r\n\r\n    showCategoryItems = () => (\r\n        this.props.products.woods ?\r\n            this.props.products.woods.map((item,i)=>(\r\n                <div className=\"category_item\" key={item._id}>\r\n                    {item.name}\r\n                </div>\r\n            ))\r\n        :null\r\n    )\r\n\r\n    updateForm = (element) => {\r\n        const newFormdata = update(element,this.state.formdata,'woods');\r\n        this.setState({\r\n            formError: false,\r\n            formdata: newFormdata\r\n        });\r\n    }\r\n\r\n    resetFieldsHandler = () =>{\r\n        const newFormData = resetFields(this.state.formdata,'woods');\r\n\r\n        this.setState({\r\n            formdata: newFormData,\r\n            formSuccess:true\r\n        });\r\n    }\r\n\r\n    submitForm= (event) =>{\r\n        event.preventDefault();\r\n        \r\n        let dataToSubmit = generateData(this.state.formdata,'woods');\r\n        let formIsValid = isFormValid(this.state.formdata,'woods')\r\n        let existingWoods = this.props.products.woods;\r\n\r\n        if(formIsValid){\r\n            this.props.dispatch(addWood(dataToSubmit,existingWoods)).then(response=>{\r\n                if(response.payload.success){\r\n                    this.resetFieldsHandler();\r\n                }else{\r\n                    this.setState({formError:true})\r\n                }\r\n            })\r\n        } else {\r\n            this.setState({\r\n                formError: true\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        this.props.dispatch(getWoods());\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"admin_category_wrapper\">\r\n            <h1>Woods</h1>\r\n            <div className=\"admin_two_column\">\r\n                <div className=\"left\">\r\n                    <div className=\"brands_container\">\r\n                        {this.showCategoryItems()}\r\n                    </div>\r\n                </div>\r\n                <div className=\"right\">\r\n                    \r\n                <form onSubmit={(event)=> this.submitForm(event)}>\r\n\r\n                     <FormField\r\n                        id={'name'}\r\n                        formdata={this.state.formdata.name}\r\n                        change={(element) => this.updateForm(element)}\r\n                    />\r\n\r\n\r\n                    {this.state.formError ?\r\n                        <div className=\"error_label\">\r\n                            Please check your data\r\n                        </div>\r\n                        : null}\r\n                    <button onClick={(event) => this.submitForm(event)}>\r\n                        Add wood\r\n                    </button>\r\n\r\n                </form>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        products: state.products\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(ManageWoods);\r\n"]},"metadata":{},"sourceType":"module"}