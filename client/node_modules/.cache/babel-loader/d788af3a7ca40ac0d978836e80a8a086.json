{"ast":null,"code":"var _jsxFileName = \"D:\\\\2077\\\\Waves\\\\client\\\\src\\\\components\\\\User\\\\admin\\\\addProducts.js\";\nimport React, { Component } from 'react';\nimport UserLayout from \"../../../hoc/userLayout\";\nimport FormField from '../../utils/Form/FormField';\nimport { update, generateData, isFormValid, populateOptionFields, resetFields } from '../../utils/Form/formActions';\nimport { connect } from 'react-redux';\nimport { getBrands, getWoods, addProduct, clearProduct } from '../../../actions/products_actions';\n\nclass AddProduct extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      formError: false,\n      formSuccess: false,\n      formdata: {\n        name: {\n          element: 'input',\n          value: '',\n          config: {\n            label: 'Product Name',\n            name: 'name_input',\n            type: 'text',\n            placeholder: 'Enter your name'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touches: false,\n          validationMessage: '',\n          showLabel: true\n        },\n        description: {\n          element: 'textarea',\n          value: '',\n          config: {\n            label: 'Product Description',\n            name: 'description_input',\n            type: 'text',\n            placeholder: 'Enter your description'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touches: false,\n          validationMessage: '',\n          showLabel: true\n        },\n        price: {\n          element: 'input',\n          value: '',\n          config: {\n            label: 'Product Price',\n            name: 'price_input',\n            type: 'text',\n            placeholder: 'Enter your price'\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touches: false,\n          validationMessage: '',\n          showLabel: true\n        },\n        brand: {\n          element: 'select',\n          value: '',\n          config: {\n            label: 'Product Brand',\n            name: 'brands_input',\n            options: []\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touches: false,\n          validationMessage: '',\n          showLabel: true\n        },\n        shipping: {\n          element: 'select',\n          value: '',\n          config: {\n            label: 'Shipping',\n            name: 'shipping_input',\n            options: [{\n              key: true,\n              value: 'Yes'\n            }, {\n              key: false,\n              value: 'No'\n            }]\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touches: false,\n          validationMessage: '',\n          showLabel: true\n        },\n        available: {\n          element: 'select',\n          value: '',\n          config: {\n            label: 'Available, in stock',\n            name: 'available_input',\n            options: [{\n              key: true,\n              value: 'Yes'\n            }, {\n              key: false,\n              value: 'No'\n            }]\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touches: false,\n          validationMessage: '',\n          showLabel: true\n        },\n        wood: {\n          element: 'select',\n          value: '',\n          config: {\n            label: 'Wood Material',\n            name: 'wood_input',\n            options: []\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touches: false,\n          validationMessage: '',\n          showLabel: true\n        },\n        frets: {\n          element: 'select',\n          value: '',\n          config: {\n            label: 'Frets',\n            name: 'frets_input',\n            options: [{\n              key: 20,\n              value: 20\n            }, {\n              key: 21,\n              value: 21\n            }, {\n              key: 22,\n              value: 22\n            }, {\n              key: 24,\n              value: 24\n            }]\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touches: false,\n          validationMessage: '',\n          showLabel: true\n        },\n        publish: {\n          element: 'select',\n          value: '',\n          config: {\n            label: 'Publish',\n            name: 'publish_input',\n            options: [{\n              key: true,\n              value: 'Public'\n            }, {\n              key: false,\n              value: 'Hidden'\n            }]\n          },\n          validation: {\n            required: true\n          },\n          valid: false,\n          touches: false,\n          validationMessage: '',\n          showLabel: true\n        }\n      }\n    };\n\n    this.updateFields = newFormData => {\n      this.setState({\n        formdata: newFormData\n      });\n    };\n\n    this.updateForm = element => {\n      const newFormdata = update(element, this.state.formdata, 'products');\n      this.setState({\n        formError: false,\n        formdata: newFormdata\n      });\n    };\n\n    this.resetFieldHandler = () => {\n      const newFormData = resetFields(this.state.formdata, 'products');\n      this.setState({\n        formdata: newFormData,\n        formSuccess: true\n      }, () => {\n        this.props.dispatch(clearProduct());\n      });\n      setTimeout(() => {\n        this.setState({\n          formSuccess: false\n        });\n      }, 3000);\n    };\n\n    this.submitForm = event => {\n      event.preventDefault();\n      let dataToSubmit = generateData(this.state.formdata, 'products');\n      let formIsValid = isFormValid(this.state.formdata, 'products');\n\n      if (formIsValid) {\n        console.log(dataToSubmit);\n        this.props.dispatch(addProduct(dataToSubmit)).then(() => {\n          if (this.props.products.addProduct.success) {\n            this.resetFieldHandler();\n          } else {\n            this.setState({\n              formError: true\n            });\n          }\n        });\n        /* this.props.dispatch(registerUser(dataToSubmit))\r\n        .then(response =>{\r\n            if(response.payload.success){\r\n                this.setState({\r\n                    formError: false,\r\n                    formSuccess: true\r\n                });\r\n                setTimeout(() => {\r\n                    this.props.history.push('/register_login');\r\n                }, 2000)\r\n            }else{\r\n                this.setState({\r\n                    formError: true\r\n                })\r\n            }\r\n        }).catch( e => this.setState({formError: true})) */\n      } else {\n        this.setState({\n          formError: true\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    const formdata = this.state.formdata;\n    this.props.dispatch(getBrands()).then(response => {\n      const newFormData = populateOptionFields(formdata, this.props.products.brands, 'brand');\n      this.updateFields(newFormData); //console.log(newFormData);\n    }).catch(e => console.log(e));\n    this.props.dispatch(getWoods()).then(response => {\n      const newFormData = populateOptionFields(formdata, this.props.products.woods, 'wood');\n      this.updateFields(newFormData); //console.log(newFormData);\n    }).catch(e => console.log(e));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(UserLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 21\n      }\n    }, \"Add product\"), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: event => this.submitForm(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(FormField, {\n      id: \"name\",\n      formdata: this.state.formdata.name,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: \"description\",\n      formdata: this.state.formdata.description,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: \"price\",\n      formdata: this.state.formdata.price,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_devider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: \"brand\",\n      formdata: this.state.formdata.brand,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: \"shipping\",\n      formdata: this.state.formdata.shipping,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: \"available\",\n      formdata: this.state.formdata.available,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_devider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: \"wood\",\n      formdata: this.state.formdata.wood,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: \"frets\",\n      formdata: this.state.formdata.frets,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      id: \"publish\",\n      formdata: this.state.formdata.publish,\n      change: element => this.updateForm(element),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 25\n      }\n    }), this.state.formSuccess ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form_success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 33\n      }\n    }, \"Success..\") : null, this.state.formError ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"error_label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 33\n      }\n    }, \"Please check your data\") : null, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: event => this.submitForm(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 29\n      }\n    }, \"Add Product\"))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    products: state.products\n  };\n};\n\nexport default connect(mapStateToProps)(AddProduct);","map":{"version":3,"sources":["D:/2077/Waves/client/src/components/User/admin/addProducts.js"],"names":["React","Component","UserLayout","FormField","update","generateData","isFormValid","populateOptionFields","resetFields","connect","getBrands","getWoods","addProduct","clearProduct","AddProduct","state","formError","formSuccess","formdata","name","element","value","config","label","type","placeholder","validation","required","valid","touches","validationMessage","showLabel","description","price","brand","options","shipping","key","available","wood","frets","publish","updateFields","newFormData","setState","updateForm","newFormdata","resetFieldHandler","props","dispatch","setTimeout","submitForm","event","preventDefault","dataToSubmit","formIsValid","console","log","then","products","success","componentDidMount","response","brands","catch","e","woods","render","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport UserLayout from \"../../../hoc/userLayout\";\r\n\r\nimport FormField from '../../utils/Form/FormField';\r\nimport {update, generateData, isFormValid, populateOptionFields, resetFields} from '../../utils/Form/formActions';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { getBrands, getWoods, addProduct, clearProduct } from '../../../actions/products_actions';\r\n\r\nclass AddProduct extends Component {\r\n\r\n    state = {\r\n        formError: false,\r\n        formSuccess: false,\r\n        formdata: {\r\n            name:{\r\n                element: 'input',\r\n                value: '',\r\n                config: {\r\n                    label: 'Product Name',\r\n                    name: 'name_input',\r\n                    type: 'text',\r\n                    placeholder: 'Enter your name'\r\n                },\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touches: false,\r\n                validationMessage: '',\r\n                showLabel: true\r\n            },\r\n            description:{\r\n                element: 'textarea',\r\n                value: '',\r\n                config: {\r\n                    label: 'Product Description',\r\n                    name: 'description_input',\r\n                    type: 'text',\r\n                    placeholder: 'Enter your description'\r\n                },\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touches: false,\r\n                validationMessage: '',\r\n                showLabel: true\r\n            },\r\n            price:{\r\n                element: 'input',\r\n                value: '',\r\n                config: {\r\n                    label: 'Product Price',\r\n                    name: 'price_input',\r\n                    type: 'text',\r\n                    placeholder: 'Enter your price'\r\n                },\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touches: false,\r\n                validationMessage: '',\r\n                showLabel: true\r\n            },\r\n            brand:{\r\n                element: 'select',\r\n                value: '',\r\n                config: {\r\n                    label: 'Product Brand',\r\n                    name: 'brands_input',\r\n                    options: []\r\n                },\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touches: false,\r\n                validationMessage: '',\r\n                showLabel: true\r\n            },\r\n            shipping:{\r\n                element: 'select',\r\n                value: '',\r\n                config: {\r\n                    label: 'Shipping',\r\n                    name: 'shipping_input',\r\n                    options: [\r\n                        {key: true, value: 'Yes'},\r\n                        {key: false, value: 'No'},\r\n                    ]\r\n                },\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touches: false,\r\n                validationMessage: '',\r\n                showLabel: true\r\n            },\r\n            available:{\r\n                element: 'select',\r\n                value: '',\r\n                config: {\r\n                    label: 'Available, in stock',\r\n                    name: 'available_input',\r\n                    options: [\r\n                        {key: true, value: 'Yes'},\r\n                        {key: false, value: 'No'},\r\n                    ]\r\n                },\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touches: false,\r\n                validationMessage: '',\r\n                showLabel: true\r\n            },\r\n            wood:{\r\n                element: 'select',\r\n                value: '',\r\n                config: {\r\n                    label: 'Wood Material',\r\n                    name: 'wood_input',\r\n                    options: []\r\n                },\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touches: false,\r\n                validationMessage: '',\r\n                showLabel: true\r\n            },\r\n            frets:{\r\n                element: 'select',\r\n                value: '',\r\n                config: {\r\n                    label: 'Frets',\r\n                    name: 'frets_input',\r\n                    options: [\r\n                        {key: 20, value: 20},\r\n                        {key: 21, value: 21},\r\n                        {key: 22, value: 22},\r\n                        {key: 24, value: 24},\r\n                    ]\r\n                },\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touches: false,\r\n                validationMessage: '',\r\n                showLabel: true\r\n            },\r\n            publish:{\r\n                element: 'select',\r\n                value: '',\r\n                config: {\r\n                    label: 'Publish',\r\n                    name: 'publish_input',\r\n                    options: [\r\n                        {key: true, value: 'Public'},\r\n                        {key: false, value: 'Hidden'},\r\n                    ]\r\n                },\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touches: false,\r\n                validationMessage: '',\r\n                showLabel: true\r\n            },\r\n        }\r\n    }\r\n\r\n    updateFields = (newFormData) => {\r\n        this.setState({\r\n            formdata: newFormData\r\n        })\r\n    }\r\n\r\n    updateForm = (element) => {\r\n        const newFormdata = update(element, this.state.formdata, 'products');\r\n        this.setState({\r\n            formError: false,\r\n            formdata: newFormdata\r\n        })\r\n    }\r\n\r\n    resetFieldHandler = () => {\r\n        const newFormData = resetFields(this.state.formdata, 'products')\r\n\r\n        this.setState({\r\n            formdata: newFormData,\r\n            formSuccess: true\r\n        },()=>{\r\n            this.props.dispatch(clearProduct())\r\n        });\r\n        setTimeout(()=>{\r\n            this.setState({formSuccess: false})\r\n        }, 3000);\r\n    }\r\n\r\n    submitForm = (event) => {\r\n        event.preventDefault();\r\n\r\n        let dataToSubmit = generateData(this.state.formdata, 'products');\r\n        let formIsValid = isFormValid(this.state.formdata, 'products');\r\n\r\n        if(formIsValid){\r\n            console.log(dataToSubmit)\r\n            this.props.dispatch(addProduct(dataToSubmit)).then(()=>{\r\n                if(this.props.products.addProduct.success){\r\n                    this.resetFieldHandler()\r\n                }else{\r\n                    this.setState({formError: true})\r\n                }\r\n            })\r\n            /* this.props.dispatch(registerUser(dataToSubmit))\r\n            .then(response =>{\r\n                if(response.payload.success){\r\n                    this.setState({\r\n                        formError: false,\r\n                        formSuccess: true\r\n                    });\r\n                    setTimeout(() => {\r\n                        this.props.history.push('/register_login');\r\n                    }, 2000)\r\n                }else{\r\n                    this.setState({\r\n                        formError: true\r\n                    })\r\n                }\r\n            }).catch( e => this.setState({formError: true})) */\r\n        }else{\r\n            this.setState({\r\n                formError: true\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        const formdata = this.state.formdata;\r\n\r\n        this.props.dispatch(getBrands())\r\n        .then(response => {\r\n            const newFormData = populateOptionFields(formdata, this.props.products.brands,'brand')\r\n            this.updateFields(newFormData)\r\n            //console.log(newFormData);\r\n        }).catch( e => console.log(e))\r\n\r\n        this.props.dispatch(getWoods())\r\n        .then(response => {\r\n            const newFormData = populateOptionFields(formdata, this.props.products.woods,'wood')\r\n            this.updateFields(newFormData)\r\n            //console.log(newFormData);\r\n        }).catch( e => console.log(e))\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <UserLayout>\r\n                <div>\r\n                    <h1>Add product</h1>\r\n                    <form onSubmit={(event) => this.submitForm(event)}> \r\n\r\n                        <FormField \r\n                            id={\"name\"}\r\n                            formdata = {this.state.formdata.name}\r\n                            change={(element) => this.updateForm(element)}\r\n                        />\r\n\r\n                        <FormField \r\n                            id={\"description\"}\r\n                            formdata = {this.state.formdata.description}\r\n                            change={(element) => this.updateForm(element)}\r\n                        />\r\n\r\n                        <FormField \r\n                            id={\"price\"}\r\n                            formdata = {this.state.formdata.price}\r\n                            change={(element) => this.updateForm(element)}\r\n                        />\r\n\r\n                        <div className=\"form_devider\"></div>\r\n                        \r\n                        <FormField \r\n                            id={\"brand\"}\r\n                            formdata = {this.state.formdata.brand}\r\n                            change={(element) => this.updateForm(element)}\r\n                        />\r\n\r\n                        <FormField \r\n                            id={\"shipping\"}\r\n                            formdata = {this.state.formdata.shipping}\r\n                            change={(element) => this.updateForm(element)}\r\n                        />\r\n\r\n                        <FormField \r\n                            id={\"available\"}\r\n                            formdata = {this.state.formdata.available}\r\n                            change={(element) => this.updateForm(element)}\r\n                        />\r\n\r\n                        <div className=\"form_devider\"></div>\r\n\r\n                        <FormField \r\n                            id={\"wood\"}\r\n                            formdata = {this.state.formdata.wood}\r\n                            change={(element) => this.updateForm(element)}\r\n                        />\r\n\r\n                        <FormField \r\n                            id={\"frets\"}\r\n                            formdata = {this.state.formdata.frets}\r\n                            change={(element) => this.updateForm(element)}\r\n                        />\r\n\r\n                        <FormField \r\n                            id={\"publish\"}\r\n                            formdata = {this.state.formdata.publish}\r\n                            change={(element) => this.updateForm(element)}\r\n                        />\r\n\r\n                        {\r\n                            this.state.formSuccess ?\r\n                                <div className=\"form_success\">\r\n                                    Success..\r\n                                </div>\r\n                            :null\r\n                        }\r\n\r\n                        {this.state.formError ? \r\n                                <div className=\"error_label\">Please check your data</div>\r\n                            :null}\r\n                            <button onClick={ (event) => this.submitForm(event)} >\r\n                                Add Product\r\n                            </button>\r\n                        \r\n\r\n                    </form>\r\n                </div>\r\n            </UserLayout>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        products: state.products\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(AddProduct);"]},"metadata":{},"sourceType":"module"}